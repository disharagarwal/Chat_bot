{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst steps = [{\n  id: '0',\n  message: 'Hey Geek!',\n  trigger: '1'\n}, {\n  id: '1',\n  message: 'Please write your username',\n  trigger: '2'\n}, {\n  id: '2',\n  user: true,\n  trigger: '3'\n}, {\n  id: '3',\n  message: _ref => {\n    let {\n      previousValue\n    } = _ref;\n    return `Hi ${previousValue}, how can I help you?`;\n  },\n  trigger: '4'\n}, {\n  id: '4',\n  options: [{\n    value: 1,\n    label: 'View Courses'\n  }, {\n    value: 2,\n    label: 'Read Articles'\n  }],\n  end: true\n}];\nconst theme = {\n  background: '#C9FF8F',\n  headerBgColor: '#197B22',\n  headerFontSize: '20px',\n  botBubbleColor: '#0F3789',\n  headerFontColor: 'white',\n  botFontColor: 'white',\n  userBubbleColor: '#FF5733',\n  userFontColor: 'white'\n};\nconst config = {\n  botAvatar: 'img.png',\n  floating: true\n};\nconst VoiceRecognitionChatBot = () => {\n  _s();\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n    handleUserResponse(transcript);\n  };\n  const handleUserResponse = response => {\n    const chatBot = document.getElementsByClassName('rsc-container')[0];\n    const input = chatBot.getElementsByTagName('input')[0];\n    input.value = response;\n    input.form.dispatchEvent(new Event('submit'));\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.start();\n  };\n  useEffect(() => {\n    return () => {\n      const recognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognition.stop();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ChatBot, {\n        headerTitle: \"GeekBot\",\n        steps: steps,\n        ...config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVoiceRecognition,\n      children: \"Start Voice Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Voice Input: \", voiceInput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceRecognitionChatBot, \"yg5Wd8SkEDjODafiFSSyvX1q19M=\");\n_c = VoiceRecognitionChatBot;\nexport default VoiceRecognitionChatBot;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecognitionChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatBot","ThemeProvider","jsxDEV","_jsxDEV","steps","id","message","trigger","user","_ref","previousValue","options","value","label","end","theme","background","headerBgColor","headerFontSize","botBubbleColor","headerFontColor","botFontColor","userBubbleColor","userFontColor","config","botAvatar","floating","VoiceRecognitionChatBot","_s","voiceInput","setVoiceInput","inputRef","handleVoiceInput","event","transcript","results","handleUserResponse","response","chatBot","document","getElementsByClassName","input","getElementsByTagName","form","dispatchEvent","Event","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stop","className","children","headerTitle","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\n\nconst steps = [\n  {\n    id: '0',\n    message: 'Hey Geek!',\n    trigger: '1',\n  },\n  {\n    id: '1',\n    message: 'Please write your username',\n    trigger: '2',\n  },\n  {\n    id: '2',\n    user: true,\n    trigger: '3',\n  },\n  {\n    id: '3',\n    message: ({ previousValue }) => `Hi ${previousValue}, how can I help you?`,\n    trigger: '4',\n  },\n  {\n    id: '4',\n    options: [\n      { value: 1, label: 'View Courses' },\n      { value: 2, label: 'Read Articles' },\n    ],\n    end: true,\n  },\n];\n\nconst theme = {\n  background: '#C9FF8F',\n  headerBgColor: '#197B22',\n  headerFontSize: '20px',\n  botBubbleColor: '#0F3789',\n  headerFontColor: 'white',\n  botFontColor: 'white',\n  userBubbleColor: '#FF5733',\n  userFontColor: 'white',\n};\n\nconst config = {\n  botAvatar: 'img.png',\n  floating: true,\n};\n\nconst VoiceRecognitionChatBot = () => {\n  const [voiceInput, setVoiceInput] = useState('');\n\n  const inputRef = useRef(null);\n\n  const handleVoiceInput = (event) => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n    handleUserResponse(transcript);\n  };\n\n  const handleUserResponse = (response) => {\n    const chatBot = document.getElementsByClassName('rsc-container')[0];\n    const input = chatBot.getElementsByTagName('input')[0];\n    input.value = response;\n    input.form.dispatchEvent(new Event('submit'));\n  };\n\n  const startVoiceRecognition = () => {\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.start();\n  };\n\n  useEffect(() => {\n    return () => {\n      const recognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognition.stop();\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <ChatBot\n          headerTitle=\"GeekBot\"\n          steps={steps}\n          {...config}\n        />\n      </ThemeProvider>\n      <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\n      <div>Voice Input: {voiceInput}</div>\n    </div>\n  );\n};\n\nexport default VoiceRecognitionChatBot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}