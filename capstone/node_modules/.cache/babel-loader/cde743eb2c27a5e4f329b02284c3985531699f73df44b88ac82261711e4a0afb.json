{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const recognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    recognition.stop();\n  };\n  const handleUserInput = event => {\n    event.preventDefault();\n    const userInput = inputRef.current.value;\n    setMessages([...messages, {\n      text: userInput,\n      isUser: true\n    }]);\n    inputRef.current.value = '';\n  };\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      style: {\n        height: '400px',\n        overflow: 'scroll'\n      },\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: message.isUser ? 'right' : 'left'\n        },\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVoiceRecognition,\n      children: \"Start Voice Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopVoiceRecognition,\n      children: \"Stop Voice Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Voice Input: \", voiceInput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"xiYZfLz8Ib5Rxn6xgwxv4+kDHQk=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","voiceInput","setVoiceInput","inputRef","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","handleUserInput","preventDefault","userInput","current","value","text","isUser","chatWindow","document","getElementById","scrollTop","scrollHeight","children","id","style","height","overflow","map","message","index","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","ref","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const recognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    recognition.stop();\r\n  };\r\n\r\n  const handleUserInput = (event) => {\r\n    event.preventDefault();\r\n    const userInput = inputRef.current.value;\r\n    setMessages([...messages, { text: userInput, isUser: true }]);\r\n    inputRef.current.value = '';\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"chat-window\" style={{ height: '400px', overflow: 'scroll' }}>\r\n        {messages.map((message, index) => (\r\n          <div key={index} style={{ textAlign: message.isUser ? 'right' : 'left' }}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleUserInput}>\r\n        <input type=\"text\" ref={inputRef} />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n      <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      <div>Voice Input: {voiceInput}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}