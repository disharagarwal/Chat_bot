{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport mysql from 'mysql';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'chat_form'\n});\nconnection.connect(err => {\n  if (err) {\n    console.error('Error connecting to MySQL:', err);\n  } else {\n    console.log('Connected to MySQL database');\n  }\n});\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [voiceInput, setVoiceInput] = useState('');\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\n  const inputRef = useRef(null);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?'\n  }, {\n    id: 2,\n    text: 'What is your address?'\n  }, {\n    id: 3,\n    text: 'What is your date of birth?'\n  }\n  // Add more questions as needed\n  ];\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const handleUserInput = event => {\n    event.preventDefault();\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Add the user's input to the messages\n    const updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Save user input to the database\n    const saveUserInput = (name, address, dob) => {\n      const sql = `INSERT INTO your_table_name (name, address, dob) VALUES (?, ?, ?)`;\n      const values = [name, address, dob];\n      connection.query(sql, values, error => {\n        if (error) {\n          console.error('Error saving user input to MySQL:', error);\n        } else {\n          console.log('User input saved to MySQL');\n        }\n      });\n    };\n\n    // Move to the next question or end the conversation\n    if (currentQuestionIndex + 1 < questions.length) {\n      // Ask the next question\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n\n      // Save the user input to the database\n      const {\n        name,\n        address,\n        dob\n      } = getUserInputData(updatedMessages);\n      saveUserInput(name, address, dob);\n    }\n  };\n\n  // Helper function to extract user input data from messages\n  const getUserInputData = messages => {\n    let name = '';\n    let address = '';\n    let dob = '';\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      if (message.isUser) {\n        if (name === '') {\n          name = message.text;\n        } else if (address === '') {\n          address = message.text;\n        } else if (dob === '') {\n          dob = message.text;\n        }\n      }\n    }\n    return {\n      name,\n      address,\n      dob\n    };\n  };\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"5FxZbVCk1CZpymahDgb8K1VkeSk=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","mysql","jsxDEV","_jsxDEV","connection","createConnection","host","user","password","database","connect","err","console","error","log","ChatBot","_s","messages","setMessages","voiceInput","setVoiceInput","confirmSpelling","setConfirmSpelling","inputRef","questions","id","text","currentQuestionIndex","setCurrentQuestionIndex","handleVoiceInput","event","transcript","results","handleVoiceError","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","handleUserInput","preventDefault","userInput","current","value","currentQuestion","updatedMessages","isUser","saveUserInput","name","address","dob","sql","values","query","length","nextQuestion","nextQuestionMessage","endMessage","getUserInputData","i","message","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css'\r\nimport mysql from 'mysql';\r\n\r\nconst connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'root',\r\n  password: '',\r\n  database: 'chat_form',\r\n});\r\n\r\nconnection.connect((err) => {\r\n  if (err) {\r\n    console.error('Error connecting to MySQL:', err);\r\n  } else {\r\n    console.log('Connected to MySQL database');\r\n  }\r\n});\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\r\n  const inputRef = useRef(null);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?' },\r\n    { id: 2, text: 'What is your address?' },\r\n    { id: 3, text: 'What is your date of birth?' },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  const handleUserInput = (event) => {\r\n    event.preventDefault();\r\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n  \r\n    // Add the user's input to the messages\r\n    const updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n  \r\n    // Save user input to the database\r\n    const saveUserInput = (name, address, dob) => {\r\n      const sql = `INSERT INTO your_table_name (name, address, dob) VALUES (?, ?, ?)`;\r\n      const values = [name, address, dob];\r\n      connection.query(sql, values, (error) => {\r\n        if (error) {\r\n          console.error('Error saving user input to MySQL:', error);\r\n        } else {\r\n          console.log('User input saved to MySQL');\r\n        }\r\n      });\r\n    };\r\n  \r\n    // Move to the next question or end the conversation\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n  \r\n      // Save the user input to the database\r\n      const { name, address, dob } = getUserInputData(updatedMessages);\r\n      saveUserInput(name, address, dob);\r\n    }\r\n  };\r\n  \r\n  // Helper function to extract user input data from messages\r\n  const getUserInputData = (messages) => {\r\n    let name = '';\r\n    let address = '';\r\n    let dob = '';\r\n  \r\n    for (let i = 0; i < messages.length; i++) {\r\n      const message = messages[i];\r\n      if (message.isUser) {\r\n        if (name === '') {\r\n          name = message.text;\r\n        } else if (address === '') {\r\n          address = message.text;\r\n        } else if (dob === '') {\r\n          dob = message.text;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return { name, address, dob };\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}