{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [dob, setDob] = useState('');\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?',\n    field: 'name'\n  }, {\n    id: 2,\n    text: 'What is your address?',\n    field: 'address'\n  }, {\n    id: 3,\n    text: 'What is your date of birth?',\n    field: 'dob'\n  }\n  // Add more questions as needed\n  ];\n\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Capture the user's input for the current field\n    switch (currentQuestion.field) {\n      case 'name':\n        setName(userInput);\n        break;\n      case 'address':\n        setAddress(userInput);\n        break;\n      case 'dob':\n        setDob(userInput);\n        break;\n      default:\n        break;\n    }\n\n    // Add the user's input to the messages\n    const updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Move to the next field or end the conversation\n    if (currentQuestionIndex + 1 < questions.length) {\n      // Ask the next question\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n\n      try {\n        await axios.post('http://localhost:3001/save', {\n          userInput: {\n            name,\n            address,\n            dob\n          }\n        });\n        console.log('User input saved successfully');\n      } catch (error) {\n        console.error('Failed to save user input:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: currentQuestionIndex < questions.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: inputRef,\n          value: voiceInput,\n          onChange: e => setVoiceInput(e.target.value),\n          placeholder: `Enter your ${questions[currentQuestionIndex].field}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"6MkrpQtoJ0ZPzG1CuT3VxwBfQIw=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","name","setName","address","setAddress","dob","setDob","voiceInput","setVoiceInput","inputRef","questions","id","text","field","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","handleUserInput","preventDefault","userInput","current","value","currentQuestion","updatedMessages","isUser","length","nextQuestion","nextQuestionMessage","endMessage","post","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","onSubmit","type","ref","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [name, setName] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?', field: 'name' },\r\n    { id: 2, text: 'What is your address?', field: 'address' },\r\n    { id: 3, text: 'What is your date of birth?', field: 'dob' },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n\r\n    // Capture the user's input for the current field\r\n    switch (currentQuestion.field) {\r\n      case 'name':\r\n        setName(userInput);\r\n        break;\r\n      case 'address':\r\n        setAddress(userInput);\r\n        break;\r\n      case 'dob':\r\n        setDob(userInput);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // Add the user's input to the messages\r\n    const updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n\r\n    // Move to the next field or end the conversation\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n\r\n      try {\r\n        await axios.post('http://localhost:3001/save', {\r\n          userInput: {\r\n            name,\r\n            address,\r\n            dob,\r\n          },\r\n        });\r\n        console.log('User input saved successfully');\r\n      } catch (error) {\r\n        console.error('Failed to save user input:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        {currentQuestionIndex < questions.length && (\r\n          <>\r\n            <input\r\n              type=\"text\"\r\n              ref={inputRef}\r\n              value={voiceInput}\r\n              onChange={(e) => setVoiceInput(e.target.value)}\r\n              placeholder={`Enter your ${questions[currentQuestionIndex].field}`}\r\n            />\r\n            <button type=\"submit\">Send</button>\r\n          </>\r\n        )}\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,aAAa;AACpB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,GAAG,EAAEC,MAAM,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMsB,QAAQ,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMqB,SAAS,GAAG,CAChB;IAAEC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,oBAAoB;IAAEC,KAAK,EAAE;EAAO,CAAC,EACpD;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,uBAAuB;IAAEC,KAAK,EAAE;EAAU,CAAC,EAC1D;IAAEF,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,6BAA6B;IAAEC,KAAK,EAAE;EAAM;EAC3D;EAAA,CACD;;EAED,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;IACjDR,aAAa,CAACQ,UAAU,CAAC;EAC3B,CAAC;EAED,MAAME,gBAAgB,GAAIH,KAAK,IAAK;IAClCI,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEL,KAAK,CAACM,KAAK,CAAC;EACtD,CAAC;EAED,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMC,iBAAiB,GACrBC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IAC5D,MAAMC,WAAW,GAAG,IAAIH,iBAAiB,CAAC,CAAC;IAC3CG,WAAW,CAACC,cAAc,GAAG,KAAK;IAClCD,WAAW,CAACE,IAAI,GAAG,OAAO;IAC1BF,WAAW,CAACG,gBAAgB,CAAC,QAAQ,EAAEf,gBAAgB,CAAC;IACxDY,WAAW,CAACG,gBAAgB,CAAC,OAAO,EAAEX,gBAAgB,CAAC;IACvDQ,WAAW,CAACI,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMR,iBAAiB,GACrBC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IAC5D,MAAMC,WAAW,GAAG,IAAIH,iBAAiB,CAAC,CAAC;IAC3CG,WAAW,CAACM,IAAI,CAAC,CAAC;EACpB,CAAC;EAED,MAAMC,eAAe,GAAG,MAAOlB,KAAK,IAAK;IACvCA,KAAK,CAACmB,cAAc,CAAC,CAAC;IACtB,MAAMC,SAAS,GAAG5B,UAAU,IAAIE,QAAQ,CAAC2B,OAAO,CAACC,KAAK,CAAC,CAAC;IACxD,MAAMC,eAAe,GAAG5B,SAAS,CAACX,oBAAoB,CAAC;;IAEvD;IACA,QAAQuC,eAAe,CAACzB,KAAK;MAC3B,KAAK,MAAM;QACTX,OAAO,CAACiC,SAAS,CAAC;QAClB;MACF,KAAK,SAAS;QACZ/B,UAAU,CAAC+B,SAAS,CAAC;QACrB;MACF,KAAK,KAAK;QACR7B,MAAM,CAAC6B,SAAS,CAAC;QACjB;MACF;QACE;IACJ;;IAEA;IACA,MAAMI,eAAe,GAAG,CACtB,GAAG1C,QAAQ,EACX;MAAEe,IAAI,EAAEuB,SAAS;MAAEK,MAAM,EAAE;IAAK,CAAC,CAClC;IACD1C,WAAW,CAACyC,eAAe,CAAC;IAC5B/B,aAAa,CAAC,EAAE,CAAC;;IAEjB;IACA,IAAIT,oBAAoB,GAAG,CAAC,GAAGW,SAAS,CAAC+B,MAAM,EAAE;MAC/C;MACA,MAAMC,YAAY,GAAGhC,SAAS,CAACX,oBAAoB,GAAG,CAAC,CAAC;MACxD,MAAM4C,mBAAmB,GAAG;QAAE/B,IAAI,EAAE8B,YAAY,CAAC9B,IAAI;QAAE4B,MAAM,EAAE;MAAM,CAAC;MACtE1C,WAAW,CAAC,CAAC,GAAGyC,eAAe,EAAEI,mBAAmB,CAAC,CAAC;MACtD3C,uBAAuB,CAACD,oBAAoB,GAAG,CAAC,CAAC;IACnD,CAAC,MAAM;MACL;MACA,MAAM6C,UAAU,GAAG;QACjBhC,IAAI,EAAE,iCAAiC;QACvC4B,MAAM,EAAE;MACV,CAAC;MACD1C,WAAW,CAAC,CAAC,GAAGyC,eAAe,EAAEK,UAAU,CAAC,CAAC;MAC7C5C,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;;MAE5B,IAAI;QACF,MAAMV,KAAK,CAACuD,IAAI,CAAC,4BAA4B,EAAE;UAC7CV,SAAS,EAAE;YACTlC,IAAI;YACJE,OAAO;YACPE;UACF;QACF,CAAC,CAAC;QACFc,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACd;IACA,MAAM0D,UAAU,GAAGC,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC;IACzDF,UAAU,CAACG,SAAS,GAAGH,UAAU,CAACI,YAAY;EAChD,CAAC,EAAE,CAACrD,QAAQ,CAAC,CAAC;EAEdT,SAAS,CAAC,MAAM;IACd;IACA,MAAMkD,eAAe,GAAG5B,SAAS,CAACX,oBAAoB,CAAC;IACvDD,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;MAAEe,IAAI,EAAE0B,eAAe,CAAC1B,IAAI;MAAE4B,MAAM,EAAE;IAAM,CAAC,CAAC,CAAC;EAC3E,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEhD,OAAA;IAAK2D,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC5D,OAAA;MAAK2D,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7B5D,OAAA;QAAA4D,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eACNhE,OAAA;MAAKmB,EAAE,EAAC,aAAa;MAACwC,SAAS,EAAC,aAAa;MAAAC,QAAA,EAC1CvD,QAAQ,CAAC4D,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BnE,OAAA;QAEE2D,SAAS,EAAG,WAAUO,OAAO,CAAClB,MAAM,GAAG,MAAM,GAAG,KAAM,EAAE;QAAAY,QAAA,EAEvDM,OAAO,CAAC9C;MAAI,GAHR+C,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIP,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNhE,OAAA;MAAMoE,QAAQ,EAAE3B,eAAgB;MAACkB,SAAS,EAAC,YAAY;MAAAC,QAAA,EACpDrD,oBAAoB,GAAGW,SAAS,CAAC+B,MAAM,iBACtCjD,OAAA,CAAAE,SAAA;QAAA0D,QAAA,gBACE5D,OAAA;UACEqE,IAAI,EAAC,MAAM;UACXC,GAAG,EAAErD,QAAS;UACd4B,KAAK,EAAE9B,UAAW;UAClBwD,QAAQ,EAAGC,CAAC,IAAKxD,aAAa,CAACwD,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAE;UAC/C6B,WAAW,EAAG,cAAaxD,SAAS,CAACX,oBAAoB,CAAC,CAACc,KAAM;QAAE;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpE,CAAC,eACFhE,OAAA;UAAQqE,IAAI,EAAC,QAAQ;UAAAT,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,eACnC;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACPhE,OAAA;MAAK2D,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC5D,OAAA;QAAQ2E,OAAO,EAAE7C,qBAAsB;QAAA8B,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACxEhE,OAAA;QAAQ2E,OAAO,EAAEpC,oBAAqB;QAAAqB,QAAA,EAAC;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC5D,EAAA,CArJID,OAAO;AAAAyE,EAAA,GAAPzE,OAAO;AAuJb,eAAeA,OAAO;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}