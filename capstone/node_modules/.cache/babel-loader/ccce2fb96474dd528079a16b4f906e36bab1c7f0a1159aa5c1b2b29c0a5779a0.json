{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst steps = [\n  // your steps configuration...\n];\nconst theme = {\n  // your theme configuration...\n};\nconst config = {\n  // your config properties...\n};\nconst VoiceRecognitionChatBot = () => {\n  _s();\n  const [voiceInput, setVoiceInput] = useState('');\n  const recognitionRef = useRef(null);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n    handleUserResponse(transcript);\n  };\n  const handleUserResponse = response => {\n    const chatBot = document.getElementsByClassName('rsc-container')[0];\n    const input = chatBot.getElementsByTagName('input')[0];\n    input.value = response;\n    input.form.dispatchEvent(new Event('submit'));\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognitionRef.current = recognition;\n    recognition.start();\n  };\n  useEffect(() => {\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.removeEventListener('result', handleVoiceInput);\n        if (recognitionRef.current.stop) {\n          recognitionRef.current.stop();\n        }\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ChatBot, {\n        headerTitle: \"GeekBot\",\n        steps: steps,\n        ...config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVoiceRecognition,\n      children: \"Start Voice Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Voice Input: \", voiceInput]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceRecognitionChatBot, \"QjqjElUWnAy0/FldX+hWr0xUl+0=\");\n_c = VoiceRecognitionChatBot;\nexport default VoiceRecognitionChatBot;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecognitionChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatBot","ThemeProvider","jsxDEV","_jsxDEV","steps","theme","config","VoiceRecognitionChatBot","_s","voiceInput","setVoiceInput","recognitionRef","handleVoiceInput","event","transcript","results","handleUserResponse","response","chatBot","document","getElementsByClassName","input","getElementsByTagName","value","form","dispatchEvent","Event","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","current","start","removeEventListener","stop","className","children","headerTitle","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\n\nconst steps = [\n  // your steps configuration...\n];\n\nconst theme = {\n  // your theme configuration...\n};\n\nconst config = {\n  // your config properties...\n};\n\nconst VoiceRecognitionChatBot = () => {\n  const [voiceInput, setVoiceInput] = useState('');\n  const recognitionRef = useRef(null);\n\n  const handleVoiceInput = (event) => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n    handleUserResponse(transcript);\n  };\n\n  const handleUserResponse = (response) => {\n    const chatBot = document.getElementsByClassName('rsc-container')[0];\n    const input = chatBot.getElementsByTagName('input')[0];\n    input.value = response;\n    input.form.dispatchEvent(new Event('submit'));\n  };\n\n  const startVoiceRecognition = () => {\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n\n    recognitionRef.current = recognition;\n\n    recognition.start();\n  };\n\n  useEffect(() => {\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.removeEventListener(\n          'result',\n          handleVoiceInput\n        );\n        \n        if (recognitionRef.current.stop) {\n          recognitionRef.current.stop();\n        }\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <ChatBot headerTitle=\"GeekBot\" steps={steps} {...config} />\n      </ThemeProvider>\n      <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\n      <div>Voice Input: {voiceInput}</div>\n    </div>\n  );\n};\n\nexport default VoiceRecognitionChatBot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}