{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [voiceInput, setVoiceInput] = useState('');\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\n  const inputRef = useRef(null);\n  const [insertedSuccessfully, setInsertedSuccessfully] = useState(false);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?'\n  }, {\n    id: 2,\n    text: 'What is your address?'\n  }, {\n    id: 3,\n    text: 'What is your date of birth?'\n  }\n  // Add more questions as needed\n  ];\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Add the user's input to the messages\n    const updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n\n    // Move to the next question or end the conversation\n    if (currentQuestionIndex + 1 < questions.length) {\n      // Ask the next question\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Conversation ended, you can handle this however you want\n      const endMessage = {\n        text: 'Thank you for the conversation!',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n\n      try {\n        await axios.post('http://localhost:3001/save', {\n          userInput: {\n            name: '',\n            // Add the appropriate name value\n            address: '',\n            // Add the appropriate address value\n            dob: '' // Add the appropriate date of birth value\n          }\n        });\n\n        setInsertedSuccessfully(true);\n        console.log('User input saved successfully');\n      } catch (error) {\n        console.error('Failed to save user input:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"pZe+JvxRmUMp+dz9JFT/vMc6t4w=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","voiceInput","setVoiceInput","confirmSpelling","setConfirmSpelling","inputRef","insertedSuccessfully","setInsertedSuccessfully","questions","id","text","currentQuestionIndex","setCurrentQuestionIndex","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","handleUserInput","preventDefault","userInput","current","value","currentQuestion","updatedMessages","isUser","length","nextQuestion","nextQuestionMessage","endMessage","post","name","address","dob","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css'\r\nimport axios from 'axios'\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const [insertedSuccessfully, setInsertedSuccessfully] = useState(false);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?' },\r\n    { id: 2, text: 'What is your address?' },\r\n    { id: 3, text: 'What is your date of birth?' },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n  \r\n    // Add the user's input to the messages\r\n    const updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n  \r\n    // Move to the next question or end the conversation\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n      \r\n      try {\r\n        await axios.post('http://localhost:3001/save', {\r\n          userInput: {\r\n            name: '', // Add the appropriate name value\r\n            address: '', // Add the appropriate address value\r\n            dob: '', // Add the appropriate date of birth value\r\n          },\r\n        });\r\n        setInsertedSuccessfully(true);\r\n        console.log('User input saved successfully');\r\n      } catch (error) {\r\n        console.error('Failed to save user input:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}