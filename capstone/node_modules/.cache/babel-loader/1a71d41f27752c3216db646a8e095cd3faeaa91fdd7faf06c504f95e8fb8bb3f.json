{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [dob, setDob] = useState('');\n  const [voiceInput, setVoiceInput] = useState('');\n  const inputRef = useRef(null);\n  const [userInputs, setUserInputs] = useState([]);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?',\n    field: 'name'\n  }, {\n    id: 2,\n    text: 'What is your address?',\n    field: 'address'\n  }, {\n    id: 3,\n    text: 'What is your date of birth?',\n    field: 'dob'\n  }\n  // Add more questions as needed\n  ];\n\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const handleUserInput = async event => {\n    event.preventDefault();\n    console.log('Handle User Input');\n    console.log('Data:', {\n      name,\n      address,\n      dob\n    });\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Capture the user's input for the current field\n\n    let nameValue = name;\n    let addressValue = address;\n    let dobValue = dob;\n    if (currentQuestionIndex === 0) {\n      nameValue = userInput;\n    } else if (currentQuestionIndex === 1) {\n      addressValue = userInput;\n    } else if (currentQuestionIndex === 2) {\n      dobValue = userInput;\n    }\n    const updatedMessages = [...messages, {\n      text: userInput,\n      isUser: true\n    }];\n    setMessages(updatedMessages);\n    setVoiceInput('');\n    if (currentQuestionIndex + 1 < questions.length) {\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      const nextQuestionMessage = {\n        text: nextQuestion.text,\n        isUser: false\n      };\n      setMessages([...updatedMessages, nextQuestionMessage]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      const endMessage = {\n        text: 'Thank you for the conversation!',\n        isUser: false\n      };\n      setMessages([...updatedMessages, endMessage]);\n      setCurrentQuestionIndex(0);\n      try {\n        await axios.post('http://localhost:3001/save', {\n          userInput: {\n            name: nameValue,\n            address: addressValue,\n            dob: dobValue\n          }\n        });\n        console.log('User input saved successfully');\n      } catch (error) {\n        console.error('Failed to save user input:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)), userInputs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Collected Inputs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 5\n        }, this), userInputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 9\n          }, this), \" \", input.name, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 9\n          }, this), \" \", input.address, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date of Birth:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 9\n          }, this), \" \", input.dob, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 9\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 7\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"KTCFtKC80kOQo0eMCVPRPIJon0I=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","currentQuestionIndex","setCurrentQuestionIndex","name","setName","address","setAddress","dob","setDob","voiceInput","setVoiceInput","inputRef","userInputs","setUserInputs","questions","id","text","field","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","handleUserInput","preventDefault","userInput","current","value","currentQuestion","nameValue","addressValue","dobValue","updatedMessages","isUser","length","nextQuestion","nextQuestionMessage","endMessage","post","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","input","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css';\r\nimport axios from 'axios';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [name, setName] = useState('');\r\n  const [address, setAddress] = useState('');\r\n  const [dob, setDob] = useState('');\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const inputRef = useRef(null);\r\n  const [userInputs, setUserInputs] = useState([]);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?', field: 'name' },\r\n    { id: 2, text: 'What is your address?', field: 'address' },\r\n    { id: 3, text: 'What is your date of birth?', field: 'dob' },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  const handleUserInput = async (event) => {\r\n    event.preventDefault();\r\n    console.log('Handle User Input');\r\n    console.log('Data:', { name, address, dob });\r\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n\r\n    // Capture the user's input for the current field\r\n \r\n    let nameValue = name;\r\n    let addressValue = address;\r\n    let dobValue = dob;\r\n  \r\n    if (currentQuestionIndex === 0) {\r\n      nameValue = userInput;\r\n    } else if (currentQuestionIndex === 1) {\r\n      addressValue = userInput;\r\n    } else if (currentQuestionIndex === 2) {\r\n      dobValue = userInput;\r\n    }\r\n  \r\n    const updatedMessages = [\r\n      ...messages,\r\n      { text: userInput, isUser: true },\r\n    ];\r\n    setMessages(updatedMessages);\r\n    setVoiceInput('');\r\n  \r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      const nextQuestionMessage = { text: nextQuestion.text, isUser: false };\r\n      setMessages([...updatedMessages, nextQuestionMessage]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      const endMessage = {\r\n        text: 'Thank you for the conversation!',\r\n        isUser: false,\r\n      };\r\n      setMessages([...updatedMessages, endMessage]);\r\n      setCurrentQuestionIndex(0);\r\n  \r\n      try {\r\n        await axios.post('http://localhost:3001/save', {\r\n          userInput: {\r\n            name: nameValue,\r\n            address: addressValue,\r\n            dob: dobValue,\r\n          },\r\n        });\r\n        console.log('User input saved successfully');\r\n      } catch (error) {\r\n        console.error('Failed to save user input:', error);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        {userInputs.length > 0 && (\r\n  <div className=\"message bot\">\r\n    <h4>Collected Inputs:</h4>\r\n    {userInputs.map((input, index) => (\r\n      <div key={index}>\r\n        <strong>Name:</strong> {input.name}\r\n        <br />\r\n        <strong>Address:</strong> {input.address}\r\n        <br />\r\n        <strong>Date of Birth:</strong> {input.dob}\r\n        <br />\r\n        <br />\r\n      </div>\r\n    ))}\r\n  </div>\r\n)}\r\n\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}