{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [voiceInput, setVoiceInput] = useState('');\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\n  const inputRef = useRef(null);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?'\n  }, {\n    id: 2,\n    text: 'What is your address?'\n  }, {\n    id: 3,\n    text: 'What is your date of birth?'\n  }\n  // Add more questions as needed\n  ];\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n    handleUserInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const handleUserInput = event => {\n    event.preventDefault();\n    const userInput = voiceInput;\n    setMessages([...messages, {\n      text: userInput,\n      isUser: true\n    }]);\n    setVoiceInput('');\n    if (confirmSpelling) {\n      const currentQuestion = questions[currentQuestionIndex];\n      const isCorrect = userInput.toLowerCase() === 'yes';\n      if (isCorrect) {\n        const nextQuestionIndex = currentQuestionIndex + 1;\n        if (nextQuestionIndex < questions.length) {\n          const nextQuestion = questions[nextQuestionIndex];\n          setMessages([...messages, {\n            text: nextQuestion.text,\n            isUser: false\n          }]);\n          setCurrentQuestionIndex(nextQuestionIndex);\n          setConfirmSpelling(false);\n        } else {\n          setMessages([...messages, {\n            text: 'No more questions.',\n            isUser: false\n          }]);\n        }\n      } else {\n        setMessages([...messages, {\n          text: 'Please enter the correct spelling:',\n          isUser: false\n        }]);\n      }\n    } else {\n      setMessages([...messages, {\n        text: 'Did I spell it correctly? Please answer with \"Yes\" or \"No\".',\n        isUser: false\n      }]);\n      setConfirmSpelling(true);\n    }\n    inputRef.current.value = '';\n  };\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      style: {\n        height: '400px',\n        overflow: 'scroll'\n      },\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: message.isUser ? 'right' : 'left'\n        },\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 3\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startVoiceRecognition,\n      children: \"Start Voice Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopVoiceRecognition,\n      children: \"Stop Voice Recognition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"5FxZbVCk1CZpymahDgb8K1VkeSk=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","voiceInput","setVoiceInput","confirmSpelling","setConfirmSpelling","inputRef","questions","id","text","currentQuestionIndex","setCurrentQuestionIndex","handleVoiceInput","event","transcript","results","handleUserInput","handleVoiceError","console","log","error","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","preventDefault","userInput","isUser","currentQuestion","isCorrect","toLowerCase","nextQuestionIndex","length","nextQuestion","current","value","chatWindow","document","getElementById","scrollTop","scrollHeight","children","style","height","overflow","map","message","index","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\r\n  const inputRef = useRef(null);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?' },\r\n    { id: 2, text: 'What is your address?' },\r\n    { id: 3, text: 'What is your date of birth?' },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n    handleUserInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  \r\n  const handleUserInput = (event) => {\r\n    event.preventDefault();\r\n    const userInput = voiceInput;\r\n    setMessages([...messages, { text: userInput, isUser: true }]);\r\n    setVoiceInput('');\r\n  \r\n    if (confirmSpelling) {\r\n      const currentQuestion = questions[currentQuestionIndex];\r\n      const isCorrect = userInput.toLowerCase() === 'yes';\r\n  \r\n      if (isCorrect) {\r\n        const nextQuestionIndex = currentQuestionIndex + 1;\r\n  \r\n        if (nextQuestionIndex < questions.length) {\r\n          const nextQuestion = questions[nextQuestionIndex];\r\n          setMessages([...messages, { text: nextQuestion.text, isUser: false }]);\r\n          setCurrentQuestionIndex(nextQuestionIndex);\r\n          setConfirmSpelling(false);\r\n        } else {\r\n          setMessages([...messages, { text: 'No more questions.', isUser: false }]);\r\n        }\r\n      } else {\r\n        setMessages([...messages, { text: 'Please enter the correct spelling:', isUser: false }]);\r\n      }\r\n    } else {\r\n      setMessages([...messages, { text: 'Did I spell it correctly? Please answer with \"Yes\" or \"No\".', isUser: false }]);\r\n      setConfirmSpelling(true);\r\n    }\r\n  \r\n    inputRef.current.value = '';\r\n  };\r\n  \r\n  \r\n  \r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"chat-window\" style={{ height: '400px', overflow: 'scroll' }}>\r\n      {messages.map((message, index) => (\r\n  <div key={index} style={{ textAlign: message.isUser ? 'right' : 'left' }}>\r\n    {message.text}\r\n  </div>\r\n))}\r\n\r\n      </div>\r\n      <form onSubmit={handleUserInput}>\r\n      <input type=\"text\" ref={inputRef} value={voiceInput} onChange={(e) => setVoiceInput(e.target.value)} />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n      <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}