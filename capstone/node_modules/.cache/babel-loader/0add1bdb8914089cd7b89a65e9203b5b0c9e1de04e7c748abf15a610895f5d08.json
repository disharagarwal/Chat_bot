{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\components\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [voiceInput, setVoiceInput] = useState('');\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\n  const inputRef = useRef(null);\n  const questions = [{\n    id: 1,\n    text: 'What is your name?'\n  }, {\n    id: 2,\n    text: 'What is your address?'\n  }, {\n    id: 3,\n    text: 'What is your date of birth?'\n  }\n  // Add more questions as needed\n  ];\n\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const handleVoiceInput = event => {\n    const transcript = event.results[0][0].transcript;\n    setVoiceInput(transcript);\n  };\n  const handleVoiceError = event => {\n    console.log('Voice recognition error:', event.error);\n  };\n  const startVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.addEventListener('result', handleVoiceInput);\n    recognition.addEventListener('error', handleVoiceError);\n    recognition.start();\n  };\n  const stopVoiceRecognition = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.stop();\n  };\n  const handleUserInput = event => {\n    event.preventDefault();\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\n    const currentQuestion = questions[currentQuestionIndex];\n\n    // Add the user's input to the messages\n    setMessages([...messages, {\n      text: userInput,\n      isUser: true\n    }]);\n    setVoiceInput('');\n\n    // Move to the next question or end the conversation\n    if (currentQuestionIndex + 1 < questions.length) {\n      // Ask the next question\n      const nextQuestion = questions[currentQuestionIndex + 1];\n      setMessages([...messages, {\n        text: userInput,\n        isUser: true\n      }, {\n        text: nextQuestion.text,\n        isUser: false\n      }]);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      // Conversation ended, you can handle this however you want\n      setMessages([...messages, {\n        text: userInput,\n        isUser: true\n      }, {\n        text: 'Thank you for the conversation!',\n        isUser: false\n      }]);\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\n    }\n  };\n\n  useEffect(() => {\n    // Scroll to the bottom of the chat window whenever messages change\n    const chatWindow = document.getElementById('chat-window');\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }, [messages]);\n  useEffect(() => {\n    // Ask the initial question when the component mounts\n    const currentQuestion = questions[currentQuestionIndex];\n    setMessages([...messages, {\n      text: currentQuestion.text,\n      isUser: false\n    }]);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"ChatBot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat-window\",\n      className: \"chat-window\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.isUser ? 'user' : 'bot'}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUserInput,\n      className: \"input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: inputRef,\n        value: voiceInput,\n        onChange: e => setVoiceInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recognition\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startVoiceRecognition,\n        children: \"Start Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopVoiceRecognition,\n        children: \"Stop Voice Recognition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"5FxZbVCk1CZpymahDgb8K1VkeSk=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","voiceInput","setVoiceInput","confirmSpelling","setConfirmSpelling","inputRef","questions","id","text","currentQuestionIndex","setCurrentQuestionIndex","handleVoiceInput","event","transcript","results","handleVoiceError","console","log","error","startVoiceRecognition","SpeechRecognition","window","webkitSpeechRecognition","recognition","interimResults","lang","addEventListener","start","stopVoiceRecognition","stop","handleUserInput","preventDefault","userInput","current","value","currentQuestion","isUser","length","nextQuestion","chatWindow","document","getElementById","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","onSubmit","type","ref","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './style.css'\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [voiceInput, setVoiceInput] = useState('');\r\n  const [confirmSpelling, setConfirmSpelling] = useState(false);\r\n  const inputRef = useRef(null);\r\n\r\n  const questions = [\r\n    { id: 1, text: 'What is your name?' },\r\n    { id: 2, text: 'What is your address?' },\r\n    { id: 3, text: 'What is your date of birth?' },\r\n    // Add more questions as needed\r\n  ];\r\n\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  const handleVoiceInput = (event) => {\r\n    const transcript = event.results[0][0].transcript;\r\n    setVoiceInput(transcript);\r\n  };\r\n\r\n  const handleVoiceError = (event) => {\r\n    console.log('Voice recognition error:', event.error);\r\n  };\r\n\r\n  const startVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n    recognition.addEventListener('result', handleVoiceInput);\r\n    recognition.addEventListener('error', handleVoiceError);\r\n    recognition.start();\r\n  };\r\n\r\n  const stopVoiceRecognition = () => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.stop();\r\n  };\r\n\r\n  const handleUserInput = (event) => {\r\n    event.preventDefault();\r\n    const userInput = voiceInput || inputRef.current.value; // Use voiceInput if available, otherwise use text input\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n\r\n    // Add the user's input to the messages\r\n    setMessages([...messages, { text: userInput, isUser: true }]);\r\n    setVoiceInput('');\r\n\r\n    // Move to the next question or end the conversation\r\n    if (currentQuestionIndex + 1 < questions.length) {\r\n      // Ask the next question\r\n      const nextQuestion = questions[currentQuestionIndex + 1];\r\n      setMessages([\r\n        ...messages,\r\n        { text: userInput, isUser: true },\r\n        { text: nextQuestion.text, isUser: false },\r\n      ]);\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      // Conversation ended, you can handle this however you want\r\n      setMessages([\r\n        ...messages,\r\n        { text: userInput, isUser: true },\r\n        { text: 'Thank you for the conversation!', isUser: false },\r\n      ]);\r\n      setCurrentQuestionIndex(0); // Reset to the initial question for future conversations\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Scroll to the bottom of the chat window whenever messages change\r\n    const chatWindow = document.getElementById('chat-window');\r\n    chatWindow.scrollTop = chatWindow.scrollHeight;\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    // Ask the initial question when the component mounts\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n    setMessages([...messages, { text: currentQuestion.text, isUser: false }]);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <h2>ChatBot</h2>\r\n      </div>\r\n      <div id=\"chat-window\" className=\"chat-window\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form onSubmit={handleUserInput} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          ref={inputRef}\r\n          value={voiceInput}\r\n          onChange={(e) => setVoiceInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n      <div className=\"voice-recognition\">\r\n        <button onClick={startVoiceRecognition}>Start Voice Recognition</button>\r\n        <button onClick={stopVoiceRecognition}>Stop Voice Recognition</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}