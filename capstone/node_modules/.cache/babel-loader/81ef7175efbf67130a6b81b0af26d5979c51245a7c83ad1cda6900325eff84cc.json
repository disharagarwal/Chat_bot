{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem6\\\\Capstone\\\\capstone\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst steps = [{\n  id: '0',\n  message: 'Hey User!',\n  trigger: '1'\n}, {\n  id: '1',\n  message: 'Please write your Name',\n  trigger: '2'\n}, {\n  id: '2',\n  user: true,\n  trigger: '3'\n}, {\n  id: '3',\n  message: \"Hi {previousValue}, What's Your Date of Birth?\",\n  trigger: '4'\n}, {\n  id: '4',\n  component: /*#__PURE__*/_jsxDEV(DatePicker, {\n    selected: startDate,\n    onChange: handleDateChange,\n    dateFormat: \"dd/MM/yyyy\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this),\n  user: true,\n  trigger: '5'\n}, {\n  id: '5',\n  message: 'You selected {previousValue}',\n  end: true\n}];\nconst theme = {\n  background: '#C9FF8F',\n  headerBgColor: '#197B22',\n  headerFontSize: '20px',\n  botBubbleColor: '#0F3789',\n  headerFontColor: 'white',\n  botFontColor: 'white',\n  userBubbleColor: '#FF5733',\n  userFontColor: 'white'\n};\nconst config = {\n  botAvatar: 'img.png',\n  floating: true\n};\nfunction App() {\n  _s();\n  const [startDate, setStartDate] = useState(null);\n  const handleDateChange = date => {\n    setStartDate(date);\n    // Trigger the next step in the chatbot flow\n    // with the selected date as the user input\n    if (date) {\n      triggerNextStep({\n        value: date\n      });\n    }\n  };\n  const triggerNextStep = value => {\n    // Perform the logic for triggering the next step\n    console.log('Next step triggered:', value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(ChatBot, {\n        headerTitle: \"GeekBot\",\n        steps: steps,\n        ...config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"BPrYhHKUZQYajP2ECsRfGVAmWSA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChatBot","ThemeProvider","DatePicker","jsxDEV","_jsxDEV","steps","id","message","trigger","user","component","selected","startDate","onChange","handleDateChange","dateFormat","fileName","_jsxFileName","lineNumber","columnNumber","end","theme","background","headerBgColor","headerFontSize","botBubbleColor","headerFontColor","botFontColor","userBubbleColor","userFontColor","config","botAvatar","floating","App","_s","setStartDate","date","triggerNextStep","value","console","log","className","children","headerTitle","_c","$RefreshReg$"],"sources":["D:/Sem6/Capstone/capstone/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst steps = [\n  {\n    id: '0',\n    message: 'Hey User!',\n    trigger: '1',\n  },\n  {\n    id: '1',\n    message: 'Please write your Name',\n    trigger: '2',\n  },\n  {\n    id: '2',\n    user: true,\n    trigger: '3',\n  },\n  {\n    id: '3',\n    message: \"Hi {previousValue}, What's Your Date of Birth?\",\n    trigger: '4',\n  },\n  {\n    id: '4',\n    component: (\n      <DatePicker\n        selected={startDate}\n        onChange={handleDateChange}\n        dateFormat=\"dd/MM/yyyy\"\n      />\n    ),\n    user: true,\n    trigger: '5',\n  },\n  {\n    id: '5',\n    message: 'You selected {previousValue}',\n    end: true,\n  },\n];\n\nconst theme = {\n  background: '#C9FF8F',\n  headerBgColor: '#197B22',\n  headerFontSize: '20px',\n  botBubbleColor: '#0F3789',\n  headerFontColor: 'white',\n  botFontColor: 'white',\n  userBubbleColor: '#FF5733',\n  userFontColor: 'white',\n};\n\nconst config = {\n  botAvatar: 'img.png',\n  floating: true,\n};\n\nfunction App() {\n  const [startDate, setStartDate] = useState(null);\n\n  const handleDateChange = (date) => {\n    setStartDate(date);\n    // Trigger the next step in the chatbot flow\n    // with the selected date as the user input\n    if (date) {\n      triggerNextStep({ value: date });\n    }\n  };\n\n  const triggerNextStep = (value) => {\n    // Perform the logic for triggering the next step\n    console.log('Next step triggered:', value);\n  };\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <ChatBot\n          headerTitle=\"GeekBot\"\n          steps={steps}\n          {...config}\n        />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,aAAa,QAAQ,mBAAmB;AACjD,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,KAAK,GAAG,CACZ;EACEC,EAAE,EAAE,GAAG;EACPC,OAAO,EAAE,WAAW;EACpBC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,EAAE,EAAE,GAAG;EACPC,OAAO,EAAE,wBAAwB;EACjCC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,EAAE,EAAE,GAAG;EACPG,IAAI,EAAE,IAAI;EACVD,OAAO,EAAE;AACX,CAAC,EACD;EACEF,EAAE,EAAE,GAAG;EACPC,OAAO,EAAE,gDAAgD;EACzDC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,EAAE,EAAE,GAAG;EACPI,SAAS,eACPN,OAAA,CAACF,UAAU;IACTS,QAAQ,EAAEC,SAAU;IACpBC,QAAQ,EAAEC,gBAAiB;IAC3BC,UAAU,EAAC;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CACF;EACDV,IAAI,EAAE,IAAI;EACVD,OAAO,EAAE;AACX,CAAC,EACD;EACEF,EAAE,EAAE,GAAG;EACPC,OAAO,EAAE,8BAA8B;EACvCa,GAAG,EAAE;AACP,CAAC,CACF;AAED,MAAMC,KAAK,GAAG;EACZC,UAAU,EAAE,SAAS;EACrBC,aAAa,EAAE,SAAS;EACxBC,cAAc,EAAE,MAAM;EACtBC,cAAc,EAAE,SAAS;EACzBC,eAAe,EAAE,OAAO;EACxBC,YAAY,EAAE,OAAO;EACrBC,eAAe,EAAE,SAAS;EAC1BC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,MAAM,GAAG;EACbC,SAAS,EAAE,SAAS;EACpBC,QAAQ,EAAE;AACZ,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACtB,SAAS,EAAEuB,YAAY,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMe,gBAAgB,GAAIsB,IAAI,IAAK;IACjCD,YAAY,CAACC,IAAI,CAAC;IAClB;IACA;IACA,IAAIA,IAAI,EAAE;MACRC,eAAe,CAAC;QAAEC,KAAK,EAAEF;MAAK,CAAC,CAAC;IAClC;EACF,CAAC;EAED,MAAMC,eAAe,GAAIC,KAAK,IAAK;IACjC;IACAC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,KAAK,CAAC;EAC5C,CAAC;EAED,oBACElC,OAAA;IAAKqC,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBtC,OAAA,CAACH,aAAa;MAACoB,KAAK,EAAEA,KAAM;MAAAqB,QAAA,eAC1BtC,OAAA,CAACJ,OAAO;QACN2C,WAAW,EAAC,SAAS;QACrBtC,KAAK,EAAEA,KAAM;QAAA,GACTyB;MAAM;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAACe,EAAA,CA5BQD,GAAG;AAAAW,EAAA,GAAHX,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}